<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stan's Signed Snippets]]></title>
  <link href="http://stanpalatnik.github.io/atom.xml" rel="self"/>
  <link href="http://stanpalatnik.github.io/"/>
  <updated>2015-02-25T23:19:21-05:00</updated>
  <id>http://stanpalatnik.github.io/</id>
  <author>
    <name><![CDATA[Stanislav Palatnik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Generics in Depth]]></title>
    <link href="http://stanpalatnik.github.io/blog/2015/02/21/java-generics-in-depth/"/>
    <updated>2015-02-21T16:59:07-05:00</updated>
    <id>http://stanpalatnik.github.io/blog/2015/02/21/java-generics-in-depth</id>
    <content type="html"><![CDATA[<h3>Why do we need Java generics?</h3>


<p>Generics introduce a new level of compile-time type safety. This in itself makes it one of the most impactful updates to Java’s core, and arguable, brings a sane amount of type safety to the Collections framework. The most common bug this is meant to address is a nasty ClassCastException when we believe an object is of one type when really it&rsquo;s not. With Generics, this is caught at compile-time. Additionally, it improves code readability by absolving the programmer from using explicit casts.</p>

<h3>Quick overview of terminology</h3>




<figure class='code'><figcaption><span>simple generic class that extends another generic class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MimicList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">findAlphaMimic</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, MimicList<T> is a generic type. T is the type placeholder. The placeholder isn&rsquo;t limited to a single letter - any valid Java identifier will do. A generic type can have one or more type placeholders. By adding <T> type holder to a class, we are turning it into a generic type. It is represented by a concrete type when we declare/initialize MimicList as a concrete parameterized type. If your generic class is extending or implementing another generic class, you can use the same type placeholder(T) in the class we are extending to represent the same type. You cannot initialize a generic type directly(new MimicList<T>() ) because it is an abstract type. You also cannot use a primitive type to as a type parameter. That&rsquo;s because it must be convertible to java.lang.Object when the compiler performs type erasure.</p>

<!--more-->


<figure class='code'><figcaption><span>a parameterized concrete type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MimicList</span><span class="o">&lt;</span><span class="n">Earth</span><span class="o">&gt;</span> <span class="n">omegas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MimicList</span><span class="o">&lt;</span><span class="n">Earth</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>A parameterized type is dependant on an existing generic type definition to exist. If I tried to initialize MimicList<Earth> without making MimicList a generic type(above), it would fail at compile-time.</p>

<p>The code below demonstrates why we can&rsquo;t use primitives as type parameters. After the compiler strips the type information(Type Erasure, discussed later), it has to use casts to ensure that we are working with the parameterized type we initialized the object with, or throw an exception that we can&rsquo;t, say, put the result of list.get(0) into a Integer.</p>

<figure class='code'><figcaption><span>user generated code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MimicList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mimicList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MimicList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">mimicList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;MIMIC&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">mimic</span> <span class="o">=</span> <span class="n">mimicList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes..</p>

<figure class='code'><figcaption><span>compiler code … effects of type erasure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MimicList</span> <span class="n">mimicList</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MimicList</span><span class="o">();</span>
</span><span class='line'><span class="n">mimicList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;MIMIC&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">mimic</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">mimicList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// the compiler must add a cast to enforce type safety</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler would erase all type information from parameterized types and instead add explicit casts to raw types. At the bytecode level, both a generic class a raw class would look exactly the same. One consequence of this is that objects at runtime do not contain information about their generic arguments (although the information is still present on fields, method, constructors and extended class and interfaces). A benefit to this is since all type information is erased, there&rsquo;s only need for one version of the generic class to be stored in the bytecode for all variations of possible types(in comparison to C++ templating where each type had it&rsquo;s own version).</p>

<p>The type information would be completely erased, making generics non-reifiable. Bridge methods were also added on a case by case basis.</p>

<h3>Extending generics</h3>


<p>I briefly alluded that we can easily extend an existing generic class with a new generic class without much complication. In the example above, type T is an unbounded type parameter that is a type placeholder for MimicList. If we initialize MimicList as a raw type, then the underlying superclass will also be initialized as a raw class.</p>

<h3>Raw Classes</h3>


<p>A raw class is basically a generic class declared without any type parameters. Any inner classes of a raw class will also be a raw class. The only exception is a static inner class. It would be considered raw because it&rsquo;s technically not a parameterized type. It’s not even part of that instance, since it’s just a static.</p>

<p>In this example, we have no need for a placeholder because we are not referencing it anywhere. In such cases we can just replace it with ? to mean the same thing. It will have the same effect of creating a generic class definition with an unbounded type - any reference type. We still have the same type safety guarantees as if we used a java identifier instead. A wildcard without bounds is called an unbounded wildcard.</p>

<h3>Variance</h3>


<p>Covariant, Invariant, and Contravariant. These concepts are the building blocks of subtyping in modern languages. In Java, generics are invariant. Just because class Y is a subclass of class X does not mean that SomeGeneric<Y> will be a subclass of SomeGeneric<X>. It won’t.</p>

<h3>History of Type erasure</h3>


<p>Type Erasure exists because Sun wanted to keep binary compatibility with older versions of Java(versions 4 and below) when Java 5 with Generics was introduced. It&rsquo;s also basically the reason Raw classes are still allowed. There is no excuse to use a raw class when you have wildcard bounds(The only exception being class literals and the instanceof operator). At worst case, the unbounded wildcard type should fit any scenario. Bridge methods are quite useful since they let us use generic types as raw types, and more importantly, allow us to use parameterized types in function calls after their type parameters are erased by .. type erasure. Is that redundant enough for you?? Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code:</p>

<ol>
<li>Class literals, e.g. List.class, not List<String>.class</li>
<li>instanceof operand, e.g. o instanceof Set, not o instanceof Set<String></a></li>
</ol>


<p>Sometimes you need to use a raw type or use an explicit unchecked typecast. Whether it&rsquo;s for immovable things like legacy code or practical purposes like unit/mock testing, there are acceptable scenarios where we might want to forego strong compile-time safetey. To do so, we have to annoate the piece of code with @SuppressWarnings(&ldquo;unchecked&rdquo;).</p>

<figure class='code'><figcaption><span>surpress the cries of the compiler</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">someETL</span><span class="o">(</span><span class="n">Collection</span> <span class="n">legacyCollection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">typedLegacyCollection</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;)</span><span class="n">legacyCollection</span><span class="o">;</span>
</span><span class='line'><span class="c1">// process </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s recommended you place the annotation as close to the offending line as possible. We could have placed it before the function defintion, but then all unchecked warnings in that function would be ignored, not just the initial conversion of List<String>. Likewise, if we placed it before the class declaration, it would mask weak typing warnings througout the entire class!</p>

<h3>Wildcards</h3>


<p>
Wildcard types can be pretty confusing. I’ll just have a simple overview. They are very useful when we want to introduce some type flexibility into our functions and collections, but at the same time be able to keep all the compile-time safety that generics provides us.</p>

<figure class='code'><figcaption><span>simple mimic list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMimicList</span><span class="o">&lt;?&gt;</span> <span class="o">{</span> <span class="c1">//we can’t use wildcards in class declarations</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">findAlphaMimic</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One practice that takes advantage of flexible wildcards is the PECS principle.</p>

<h2>Producer Extends, Consumer Super principle</h2>


<p>The idea behind PECS is super simple, but it&rsquo;s not intuitive just from reading that title. In fact if you dig deep enough it&rsquo;s a very complicated topic dealing with variance(covariance and contravariance). But it&rsquo;s actually very simple if you just think of it in terms of type safety.</p>

<p>Let&rsquo;s start with an abstract type Soldier and some concrete classes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Soldier</span> <span class="o">{</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//pew pew</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Rita</span> <span class="kd">extends</span> <span class="n">Soldier</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//SPLICE SPLICE BOOM</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cage</span> <span class="kd">extends</span> <span class="n">Soldier</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//how do I turn this safetey off??</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Kimmel</span> <span class="kd">extends</span> <span class="n">Soldier</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The “Producer” collection</h3>


<p>A collection whose type must be a class that extends the specified type(or itself), meaning that when we have a wildcard type of &lt;? extends Soldier>, it means:</p>

<ol>
<li>You are guaranteed when you read from this collection, the object will be at least a type of Soldier</li>
<li>You can not put anything inside of this collection, except for null. <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html">That&#8217;s because null can technically be of any type.</a></li>
<li>This is called a Producer collection because it produces data. This is point of view from the collection</li>
</ol>


<p>The reason that you can&rsquo;t put anything inside of a Producer collection is because it will break the type safety guarantees. Let&rsquo;s give an example:</p>

<figure class='code'><figcaption><span>writing to extends(producer)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Soldier</span><span class="o">&gt;</span> <span class="n">allSoldiers</span> <span class="o">=</span> <span class="n">getAllCages</span><span class="o">();</span> <span class="c1">// returns ArrayList&lt;Cage&gt; </span>
</span><span class='line'><span class="n">allSoldiers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Cage</span><span class="o">());</span> <span class="c1">//not legal</span>
</span><span class='line'><span class="n">allSoldiers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Soldier</span><span class="o">());</span> <span class="c1">// not legal as well..</span>
</span><span class='line'><span class="n">allSoldiers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">Object</span><span class="o">());</span> <span class="c1">//not legal</span>
</span><span class='line'><span class="n">allSoldiers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span> <span class="c1">// &lt;a href=”http://img.444.hu/jackie.gif”&gt;this is legal.&lt;/a&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Why are none of these legal? Because the allSoldiers reference can point to either a collection of Soldier, Rita, Cage, or Kimmel. But at compile time we don’t know which one it’s going to be. For type safety, the compiler cannot allow us to add class which might or might not cause a cast exception. All the compiler knows is that whichever class we initialize allSoldiers with, it must at least be a Soldier.</p>

<figure class='code'><figcaption><span>reading from extends(producer)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Soldier</span><span class="o">&gt;</span> <span class="n">allSoldiers</span> <span class="o">=</span> <span class="n">getAllCages</span><span class="o">();</span> <span class="c1">// returns ArrayList&lt;Cage&gt; </span>
</span><span class='line'><span class="n">Soldier</span> <span class="n">oneSoldier</span> <span class="o">=</span> <span class="n">allSoldiers</span> <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// this is perfectly fine. </span>
</span><span class='line'><span class="n">Cage</span> <span class="n">oneCage</span> <span class="o">=</span> <span class="n">allSoldiers</span> <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// this is NOT legal. </span>
</span></code></pre></td></tr></table></div></figure>


<p>This argument is similar. Can you spot the pattern here? Yes, it’s all about ensuring type safety. We can only be sure that allSoldiers will be at worst case a type of Soldier, at compile time. At run-time, it could point to a reference of Kimmels for all we know.</p>

<h3>The “Consumer” collection</h3>


<p>A collection whose type is a supertype of the provided class, meaning that when we have a wildcard type of &lt;? super Soldier>. This means:</p>

<ol>
<li>You are guaranteed when you write to this collection, the object must be a Soldier or it’s supertype</li>
<li>As a consequence, we can only initialize the generic with a reference who’s type must be a supertyper</li>
<li>This is called a Consumer collection because it consumes data. This is point of view from the collection</li>
<li>User defined destructor</li>
<li>The only type you are guaranteed to get back when you read from this collection is Object</li>
</ol>




<figure class='code'><figcaption><span>initializing super(consumer)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Rita</span><span class="o">&gt;</span> <span class="n">maybeRitas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Soldier</span><span class="o">&gt;();</span> <span class="c1">//legal, Soldier is supertype of Rita</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Rita</span><span class="o">&gt;</span> <span class="n">maybeRitas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Rita</span><span class="o">&gt;();</span> <span class="c1">// legal, it’s own type guarantees type safety</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Rita</span><span class="o">&gt;</span> <span class="n">maybeRitas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span> <span class="c1">// legal</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Rita</span><span class="o">&gt;</span> <span class="n">maybeRitas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Cage</span><span class="o">&gt;();</span> <span class="c1">// not legal, Cage is not a supertype of Rita</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why does ? super Rita give us flexible type safety? In the example code above, it’s clear what we can only initialize maybeRitas with a supertype of class Rita. So it can only be of type Rita, Soldier, or Object. Let’s say we then want to add something to this collection. We are confident that if we an instance of Soldier into maybeRitas, it is guaranteed to be a subtype of whatever type we initialized the list with(Rita, Soldier, Object). But you can’t, for example, add a String, Int, or Cage to maybe Ritas no matter which of those three initializations was chosen.</p>

<p>This discussion can delve further into the differences between extends/super between not only initialization, but also it’s implications on the methods of the initialized objects. I might delve further into this but this seems like a nice overview of Java&rsquo;s attempt to bring more compile-time type safety to the language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Express.js and Dust.js on Node.js]]></title>
    <link href="http://stanpalatnik.github.io/blog/2012/04/06/using-express-dot-js-and-dust-dot-js-on-node-dot-js/"/>
    <updated>2012-04-06T18:53:04-04:00</updated>
    <id>http://stanpalatnik.github.io/blog/2012/04/06/using-express-dot-js-and-dust-dot-js-on-node-dot-js</id>
    <content type="html"><![CDATA[<p>Express.js is the most full-featured and popular Node.js open source framework. However, its default template library of choice – Jade, is far from impressive. Not only does it use it’s own syntax(you cannot use plain HTML), but it is limited to server-side rendering. In this post, we will setup Dust.js with Express.js for server-side rendering, as well as discuss a possible implementation with client-side rendering. <!--more--></p>

<p>Server-side rendering</p>

<p>Dust.js can easily be integrated into the latest Express.js version using the Consolidate.js module. This integration could easily be completed without this module, however, Consolidate.js performs the exact functionality we need, including support for caching.</p>

<p>For this example, we are using the latest Express 3.0 alpha source from Github.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Module dependencies.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">cons</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;consolidate&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// assign the dust engine to .dust files</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span><span class="p">(</span><span class="s1">&#39;dust&#39;</span><span class="p">,</span> <span class="nx">cons</span><span class="p">.</span><span class="nx">dust</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;dust&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/views&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">redirect</span><span class="o">:</span> <span class="kc">false</span><span class="p">}));</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">({</span> <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;very_unique_secret_string&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span> <span class="nx">maxAge</span><span class="o">:</span> <span class="mi">1800000</span> <span class="p">}}));</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Testing out dust.js server-side rendering&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: Make sure to install the latest Consolidate.js from the Github source, since Dust.js support has been added only recently, and is not available in the node package manager just yet.</p>

<p>This is my code for app.js for my sample Node.js application. First we include all the required modules. We set our default template engine with the app.engine command. We pass in the default extension of all the template file-names, as well as the default engine that will be used to render them.</p>

<p>We can set the default file-name extension by setting the ‘view engine’ property. This is a very convenient feature. Let’s say our file-names end with .dust. Instead of specifying ‘filename.dust’, we can just pass in ‘filename’.</p>

<figure class='code'><figcaption><span>The index page</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span> <span class="nx">PUBLIC</span> <span class="s2">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="s2">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">xmlns</span><span class="o">=</span><span class="s2">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="p">{</span><span class="o">+</span><span class="nx">title</span><span class="p">}</span><span class="mi">7</span><span class="nx">th</span><span class="o">-</span><span class="nx">Degree</span><span class="p">{</span><span class="err">/title}&lt;/title&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;/javascripts/utils.js&#39;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;/stylesheets/style.css&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">+</span><span class="nx">http_header</span><span class="o">/</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;wrapper&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;logo&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;header_login&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="o">?</span><span class="nx">username</span><span class="p">}</span>
</span><span class='line'>              <span class="p">{</span><span class="nx">username</span><span class="p">}</span>
</span><span class='line'>            <span class="p">{</span><span class="o">:</span><span class="k">else</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;/signin&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Email</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user[username]&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;s-user&quot;</span><span class="o">&gt;&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Password</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user[password]&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;s-pass&quot;</span><span class="o">&gt;&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="err">/username}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="o">+</span><span class="nx">header</span><span class="o">/</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;content&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;right&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="o">+</span><span class="nx">right</span><span class="o">/</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;left&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="o">+</span><span class="nx">left</span><span class="o">/</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">About</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Contact</span><span class="o">/</span><span class="nx">Bug</span> <span class="nx">Report</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Copyright</span> <span class="err">©</span> <span class="mi">2011</span><span class="o">-</span><span class="mi">2012</span> <span class="nx">Stanislav</span> <span class="nx">Palatnik</span><span class="p">.</span> <span class="nx">All</span> <span class="nx">rights</span> <span class="nx">reserved</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this index page gets rendered through dust.render(), it will replace all the keys and conditional statements with plain HTML code. For example, let’s say I added username: ‘Stan’ to the response object. Dust.js would detect that the username token is present, and would show my username stead of the login form!</p>

<p>Dust.js Crash Course</p>

<p>You might not recognize some symbols or tags in that HTML code. That’s because they are used by the Dust.js parser to add additional functionality(conditionals, includes). Let’s start with the title. {+title}7th-Degree{/title}. First let’s ask ourselves what problem we are trying to solve. We want to have a standardized header and footer. We want to dynamically change the title in each page, without having to change it manually in the layout.</p>

<p>By surrounding the title with {+title} tags, we can dynamically change the title by passing the variable ‘title’ during the request. If you look back at the previous Gist, we are calling res.render, and passing in  title: ‘Testing out dust.js server-side rendering’. Dust.js will see this and dynamically replace the title within those tags on the server. When the client(or crawler) loads this page, they will only see the ladder title. Similarly, the {+http_header/} tag serves the same purpose. But this case, we don’t have a default value, so we open and close the tag to create a placeholder to add additional more information in the header, like additional JavaScripts of stylesheets.</p>

<figure class='code'><figcaption><span>Conditional tags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{?username}
</span><span class='line'>  {username}
</span><span class='line'>{:else}
</span><span class='line'>  Please Log-In!</span></code></pre></td></tr></table></div></figure>


<p>Another great feature of Dust.js is support for conditionals. Putting ? in front of a tag is similar to checking if the variable the tag represents has been set. If not, we render the content in after the {:else}.</p>

<p>Client-side rendering:</p>

<p>A recent case study by LinkedIn shows the true benefits of client-side rendering: How LinkedIn leverages Dust.js.They make a strong case in support of Dust.js. One of the major advantages is removing load from your servers. Client-side templates can be served from your CDN network, while the data that populates them can come straight from your server. In this scenario, you get the best of both worlds. Offloading bandwidth to CDN servers while constantly serving the most updated content. Additionally, you are offloading the computational power to parse and render the templates on the client’s browser. This results in reduced server latency. The major downside is that you have to include the entire Dust.js framework inside the webpage, which adds considerable overhead for slow internet connections and under-powered devices.</p>

<p>Let’s take our previous example and port it to client-side rendering. In this case, we do not need to load the consolidate module on the server. We do not need to parse any variables on the server. So what’s the catch? In order to enable client-side rendering, we need to compile the dust templates into JavaScript files before we serve them to the client.That means that every time we make a change to the template, we need to compile it into JavaScript. Compiling can be done with the dust.compile() command. The alternative would be to compile the HTML source each time on the client. This is most efficient approach for the server, it does not have to worry about tracking changes to the template. However, compiling a complicated template on the client will create substantial overhead for the browser.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;dust-full-0.3.0.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">//example showing client-side compiling and rendering</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">compiled</span> <span class="o">=</span> <span class="nx">dust</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="s2">&quot;Hello {name}!&quot;</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">dust</span><span class="p">.</span><span class="nx">loadSource</span><span class="p">(</span><span class="nx">compiled</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dust</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;David&quot;</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">out</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Error loading page&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//assume we have jquery</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#pageContainer&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">out</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;pageContainer&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this simple example, we are compiling and rendering the template all inside the client. First we compile the template into JavaScript that Dust.js can understand. Then we render the template using Dust.js. In this case, the engine performs a variable substitution to replace {name} with David. In this case, we maximized the amount of work the client does, which minimizes the work for us on the server. However, there are some issues to pure client-side rendering:</p>

<p>Increased Bandwidth - The entire Dust.js framework is 26 kb. If we remove client-side rendering functionality, the size is drastically reduced to 6 kb. That extra 20 kb will substantially increase bandwidth usage.
Search Engine Optimization - Search engine crawlers will not be able to use the template because they cannot execute JavaScript. However, in the LinkedIn article mentioned earlier in the article, they address this issue by falling back to server-side rendering if the client does not support JavaScript. This solves the crawler issue, as well as client that does not support JavaScript these days.
Click here to check out more information about the Dust.js API</p>

<p>The major takeaways from this post is that Dust.js is a great templating engine. It’s powerful, versatile, and efficient. And with Express 3.0, it’s a breeze to setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing PHP-Flash Communication]]></title>
    <link href="http://stanpalatnik.github.io/blog/2012/02/20/securing-php-flash-communication/"/>
    <updated>2012-02-20T17:38:24-05:00</updated>
    <id>http://stanpalatnik.github.io/blog/2012/02/20/securing-php-flash-communication</id>
    <content type="html"><![CDATA[<p>Virtually every computer in the world has flash installed. Whether you’re running Debain or Windows 7, there’s a distribution of Adobe Flash available for you. That makes Flash the most interoperable environment available. Now let’s say you want to embed Flash into a website. Either you want a submission form, chat box, or a simple game, you will most likely need to communicate back and forth with the server. Doesn’t sound hard at all, especially with so many libraries available and so many services you can use(REST, XMLRPC, JSON, XMLSocket for low latency communication, or just a simple HTTP GET request to the PHP page). However, how sure are you of the validity of the data transferred from the client-side Flash app back to your server?</p>

<p>All programming languages preach to never trust user input directly. For a simple example, a good program will even check that a person’s name is made of valid and accepted characters. However, too many people unfortunately ignore this rule when they create Flash apps. Even if you’re creating a contact form field, there are many ways a user could exploit your site if you don’t properly secure the client’s input. Most notably, he could create an SQL injection the input fields.</p>

<p>Fortunately for form fields, there are bullet proof ways to secure them. In the following section I will discuss those. However, I will also talk about more sophisticated applications such as games which track levels and submit high scores. In these cases, it’s not possible to secure your high score list 100% , but you can make it sufficiently difficult for most.</p>

<!--more-->


<p>Securing simple form fields:</p>

<p>The first basic step is to obviously validate the form fields inside of Flash. But this is by no means makes your application secure. If anything, it saves an extra HTTP request. You will also have to duplicate this form verification on the server side. The most important thing you can do on server-side verification is check for an SQL injection. If you’re using MySQL, pass it through the mysql_real_escape_string or mysqli_real_escape_string. I strongly prefer you use mysqli_real_escape_string because it avoids some security flaws present in the former function.</p>

<p>Now that we secured basic input, we need to protect against spoofing and DDOS attacks. Suppose that an attacker wants to slow your site down considerably, or even bring it down. One way he could do it is by flooding the server with requests. If the server believes this request came from your trusted application, it will send it to your database. Even though your database will filter the content, hundreds of thousands of requests to your database will most likely bring it down. One way to protect against spoofing is by using tokens.</p>

<p>Tokens:</p>

<p>Here’s one way to approach it. Every time your trusted form sends a request to the server, it will also send along a secure token.</p>

<p>First the server will send a random string to the Flash and save the encrypted version of this string in the database. This string will be encrypted using a token that will be hard-coded into the Flash game as well as in the PHP. Now, whenever the Flash form loads, it must request a random string to be sent to it. It will then use the secure key that you hard coded to create a token and send the token along with the response. Once the server recieves your request, it will compare your encrypted token with the ones stored in the database. If there is a match, only then should you process the form. Also remember to delete the matching token from the database after that. If the token received does not match any token that have been generated in say, the last hour, then discard that request.</p>

<p>Encrypting Your Source</p>

<p>The last part is to obfuscate your action-script source good enough to deter hackers from trying to find the form fields and even the encryption key. Encrypt the entire action-script with a library like as3corelib. This will prevent the vast majority of people from proceeding. They will not be able to read your source and even think about finding the encryption key. Now whenever a user submits the form from your trusted app, it will also send the token. However, decompiling action-script is much easier then other languages because action-script is a very high level programming language, not to mention the byte-codes are well documented. Here are some ways to deter or confuse an attacker who has decrypted your application:</p>

<p>Replacing key byte arrays with functions that calculate the key
Placing numerous fake encrption keys throughout the app.
I also recommend this strategy for securing Flash games, so I will not go over it again.</p>

<p>Securing Flash Game Points Submission</p>

<p>The biggest problem with Flash-based games is how easily the high score lists can be hacked. One of the best(and most complicated) ways to protect against this is to put all the game logic on the server. That way, whenever a user submits a new high score, your server side script checks if that score is possible with the moves that the user has. For example, if the highest recorded level that the user has reached is 5, there is no way for him to have reached score x. For this to work, you cannot send HTTP requests indicating when the level has changed. The change must be determined on the server, after the Flash client has sent some command. This command should trigger a change in the level.</p>

<p>If you have a fast paced game, where there are a lot of command getting executed at the same time, you could open a socket.</p>

<p>There are many other ways to secure Flash apps, but to have basic security, I advise that you follow the encryption method mentioned in this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parenthesis Confusion in C++]]></title>
    <link href="http://stanpalatnik.github.io/blog/2011/01/20/parenthesis-confusion-in-c-plus-plus/"/>
    <updated>2011-01-20T16:44:32-05:00</updated>
    <id>http://stanpalatnik.github.io/blog/2011/01/20/parenthesis-confusion-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>I ran into this problem at least once, and I never actually thought about why it worked with or without the parenthesis, and thought that I was just doing something else wrong. But it was only so easy for me because I was doing a relatively small project, and the changes usually didn&#8217;t affect any other files. I never really thought why or how it works. But if you&#8217;re developing large scale applications or just portions of it, you need to make sure that you use it properly, or it might be a pain to debug it later. For example, as I will explain later, forgetting to add a parenthesis will keep POD class values from being properly initialized in some cases. If you don&#8217;t know the properties of POD class initialization, you could be scratching your head when a comparison fails or the compiler throws you a run-time error! If this doesn&#8217;t make sense yet, I recommend that you continue reading.</p></p>

<!--more-->


<p>First thing I want to clear up is this post deals with the dilemma when you create objects using the <a href="http://en.wikipedia.org/wiki/New_%28C%2B%2B%29">new operator</a>. If you don&#8217;t, then there really is no debate. Consider the following example:</p>


<figure class='code'><figcaption><span>Simple declaration example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Stan</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">man</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Stan</span> <span class="n">s1</span><span class="p">;</span>
</span><span class='line'><span class="n">Stan</span> <span class="nf">s2</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>Here, the second initialization is obviously wrong in this context, because the C++ compiler will interpret it as a function definition with no parameters that returns a Stan object This is clear from the syntax. Things are straightforward so far.</p>


<p>So does it matter if you add a parenthesis at the end of a <strong>dynamically generated class</strong>? It should definitely matter right?</p>


<figure class='code'><figcaption><span>Using the Stan class from the previous example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Stan</span> <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stan</span><span class="p">;</span>
</span><span class='line'><span class="n">Stan</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stan</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what&#8217;s going on here! s1 and s2 can&#8217;t both be correct right? But once you test it out, it might appear that it doesn&#8217;t matter at all. In Visual Studio 2008, the compiler doesn&#8217;t throw an error or warning at either of these two declarations. But there are some important differences between these two initializations. I will review the differences in accordance with the c++03 revision. For the run down with the c++98 revision, see Philip Taylor&#8217;s comment <a href="http://blogs.msdn.com/oldnewthing/archive/2006/12/14/1285437.aspx#1296360">here on a msdn blog</a>.</p>


<p>First let me introduce some terminology. POD means &#8216;Plain Old Data&#8217;. In C++, objects are either POD or non-POD. A POD class can be described as a simple class with little logic. More specifically, to be a POD class, it has to have data members of one of the following data-types: a built-in type(ie int, double), pointer, union, struct, array, or a class with a trivial constructor. The constructor part basically means that if you did not create a default constructor for your class, the C++ compiler will generate the generic constructor for you. A trivial constructor is a constructor that the compiler generates for you. In addition, a POD class cannot have other data types that are non-POD(for example, a string data type is not a POD class because it has a defined constructor). There are many things that would make a class non-POD even if it contains any of the members mentioned above:</p>


<ol>
<li>User defined constructor</li>
<li>User defined copy constructor</li>
<li>User defined assignment operator</li>
<li>User defined destructor</li>
<li>Non-POD data types such as a string or a non-POD class</li>
</ol>


<p>Now let&#8217;s go through the differences between these two initializations.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Stan</span> <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stan</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, s1 is default initialized, which means that all POD data-types will be left uninitialized. In this case, any int will be uninitialized.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Stan</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stan</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here s2 will be value initialized, which means that all data members will be initialized. Here, int will be zero-initialized to 0. Looking at the differences between these two initializations(s1 and s2), it&#8217;s clear that if you initialize a POD class without parenthesis, you risk having uninitialized data members. Now if you try to access them, you might get a segfault error. This can be a real headache. If you don&#8217;t know that leaving out parenthesis can cause an int to be uninitialized, then it will be hard to find the problem.</p>


<p>Let&#8217;s consider another class.</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">Stan</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">the</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>     <span class="n">Stan</span><span class="p">()</span><span class="o">:</span><span class="n">the</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to C++03, since I have create a non-trivial default constructor, this is a non-POD class now. So it doesn&#8217;t matter if I use the parenthesis, or I don&#8217;t.</p>


<p>So to sum it up, if you don&#8217;t have a POD class, or if you&#8217;re not intentionally planning to leave member objects uninitialized, then I would recommend that you always use parenthesis at the end of your class initializations to avoid possible headaches down the road. In reality, you will rarely create POD classes because they are so simple(unless you&#8217;re into functional programming?). The only time I imagine you running into this problem is when the parenthesis was accidently forgotten.</p>

]]></content>
  </entry>
  
</feed>
